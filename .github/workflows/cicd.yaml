name: Deploy to GCP
permissions:
  contents: read

on:
  push:
    branches:
      - develop
      - main
    tags:
      - "v*.*.*"

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      version: ${{ steps.set_env.outputs.version }}
      should_deploy: ${{ steps.set_env.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine environment and version
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "version=develop" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying to dev environment: develop branch"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying to production environment: main branch"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Verify tag is on main branch
            git fetch origin main
            TAG_COMMIT=$(git rev-parse HEAD)
            if ! git merge-base --is-ancestor $TAG_COMMIT origin/main; then
              echo "Error: Tag must be created from main branch"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            VERSION=${GITHUB_REF#refs/tags/}
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying to production environment: ${VERSION}"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "No deployment needed for this ref"
          fi

  deploy:
    needs: init
    if: needs.init.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.init.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to GCP VM via SSH
        uses: appleboy/ssh-action@v1.2.2
        env:
          ENVIRONMENT: ${{ needs.init.outputs.environment }}
          DB_PASS: ${{ secrets.POSTGRES_PASSWORD }}
          API_KEY_LIST: ${{ secrets.ALLOW_MODIFY_API_KEY_LIST }}
          LINE_CLIENT_ID : ${{ secrets.LINE_CLIENT_ID }}
          LINE_CLIENT_SECRET: ${{ secrets.LINE_CLIENT_SECRET }}
          LINE_REDIRECT_URI: ${{ secrets.LINE_REDIRECT_URI }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          envs: ENVIRONMENT,DB_PASS,API_KEY_LIST
          script: |
            cd /home/deploy/api-server
            ./deploy.sh ${{ needs.init.outputs.version }}

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VM_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/deploy/api-server/guanfu_backend
            docker compose ps
            curl -f http://localhost:8000/docs || echo "Warning: Backend health check failed"
