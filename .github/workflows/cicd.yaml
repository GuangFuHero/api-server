name: Deploy to GCP

on:
  push:
    branches:
      - develop
      - main
    tags:
      - "v*.*.*"

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      version: ${{ steps.set_env.outputs.version }}
      should_deploy: ${{ steps.set_env.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine environment and version
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "version=develop" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying to dev environment: develop branch"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying to production environment: main branch"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Verify tag is on main branch
            git fetch origin main
            TAG_COMMIT=$(git rev-parse HEAD)
            if ! git merge-base --is-ancestor $TAG_COMMIT origin/main; then
              echo "Error: Tag must be created from main branch"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            VERSION=${GITHUB_REF#refs/tags/}
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deploying to production environment: ${VERSION}"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "No deployment needed for this ref"
          fi

  deploy:
    needs: init
    if: needs.init.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.init.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup environment variables
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VM_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/deploy/api-server/guanfu_backend

            # Determine environment-specific values
            if [ "${{ needs.init.outputs.environment }}" = "dev" ]; then
              ENV_NAME="dev"
            else
              ENV_NAME="prod"
            fi

            # Compose DATABASE_URL from components
            DB_USER="guangfu"
            DB_PASS="${{ secrets.POSTGRES_PASSWORD }}"
            DB_HOST="postgres"
            DB_PORT="5432"
            DB_NAME="guangfu"
            DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

            # Create .env file
            cat > .env <<EOF
            # ============================================================================
            # Environment Variables (Auto-generated by CI/CD)
            # ============================================================================
            # Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            # Environment: ${{ needs.init.outputs.environment }}
            # DO NOT EDIT MANUALLY - Changes will be overwritten on next deployment
            # ============================================================================

            # ----------------------------------------------------------------------------
            # Application Settings
            # ----------------------------------------------------------------------------
            ENVIRONMENT=${ENV_NAME}
            APP_TITLE=花蓮光復救災平台 API
            PORT=8080

            # API Keys (from secrets)
            ALLOW_MODIFY_API_KEY_LIST=${{ secrets.ALLOW_MODIFY_API_KEY_LIST }}

            # Server URLs
            PROD_SERVER_URL=https://api.gf250923.org
            DEV_SERVER_URL=https://uat-api.gf250923.org

            # ----------------------------------------------------------------------------
            # Database Settings (PostgreSQL)
            # ----------------------------------------------------------------------------
            POSTGRES_USER=${DB_USER}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${DB_NAME}

            DB_USER=${DB_USER}
            DB_PASS=${{ secrets.POSTGRES_PASSWORD }}
            DB_NAME=${DB_NAME}

            # Database connection URL (auto-generated)
            DATABASE_URL=${DATABASE_URL}

            EOF

            echo "✓ Environment file created for ${{ needs.init.outputs.environment }}"

            # Verify .env file
            if [ ! -s .env ]; then
              echo "ERROR: .env file is empty or was not created"
              exit 1
            fi
            echo "✓ Environment file verified"

      - name: Deploy to GCP VM via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VM_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/deploy/api-server
            ./deploy.sh ${{ needs.init.outputs.version }}

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VM_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/deploy/api-server/guanfu_backend
            docker compose ps
            curl -f http://localhost:8000/docs || echo "Warning: Backend health check failed"
