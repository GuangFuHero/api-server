server {
    listen 80;
    server_name gf250923.org www.gf250923.org;

    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all other HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name gf250923.org www.gf250923.org;

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/gf250923.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/gf250923.org/privkey.pem;

    # Strong SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_stapling on;
    ssl_stapling_verify on;

    # -------------------------
    # CORS Configuration
    # -------------------------
    set $cors_origin "";

    # Allow same-domain and subdomains only
    if ($http_origin ~* ^https?://([a-z0-9-]+\.)?gf250923\.org$) {
        set $cors_origin $http_origin;
    }

    # Allow map site dev environment
    if ($http_origin = "https://guangfu-hero-web-git-dev-sams-projects-a10c479a.vercel.app") {
        set $cors_origin $http_origin;
    }
    if ($http_origin = "https://guangfu-hero-web-sams-projects-a10c479a.vercel.app") {
        set $cors_origin $http_origin;
    }
    if ($http_origin ~* ^https://deploy-preview-\d+--guangfu-hero-web\.netlify\.app$) {
        set $cors_origin $http_origin;
    }

    # Allow volunteer frontend Vercel deployment
    if ($http_origin = "https://hualien-volunteers-frontend-iota.vercel.app") {
        set $cors_origin $http_origin;
    }

    # Allow pinkowo GitHub Pages
    if ($http_origin = "https://pinkowo.github.io") {
        set $cors_origin $http_origin;
    }

    # Allow localhost for development
    if ($http_origin ~* ^http://localhost:(3000|5173)$) {
        set $cors_origin $http_origin;
    }

    # -------------------------
    # Main Proxy
    # -------------------------
    location / {
        # Handle OPTIONS preflight
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Vary Origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization" always;
            add_header Access-Control-Max-Age 86400 always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Proxy settings
        proxy_pass http://backend:8080;  # Docker service
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers for valid origins
        if ($cors_origin != "") {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Vary Origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization" always;
        }
    }

    # -------------------------
    # Gzip Compression
    # -------------------------
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
}
